// Map Tests
// =========

@import '../../node_modules/sass-true/sass/true';
@import '../../sass/maps';


@include test-module('Map Helpers') {
  $map: (
    one: (
      hello: (
        world: new york,
        pizza: sausage,
      ),
      goodbye: fugard,
    ),
    two: cheese,
  );


  // Truncate List
  @include test('_truncate-list') {
    $list: one two three four;
    $test: _truncate-list($list, 3);
    $expect: one two three;
    @include assert-equal($test, $expect,
      'Returns a list truncated to the given length.');
  }


  // Deep Get
  @include test('deep-get') {
    $test: deep-get($map, one, hello, world);
    $expect: new york;
    @include assert-equal($test, $expect,
      'Returns value of deep key.');
  }


  // Deep Set
  @include test('deep-set') {
    $test: deep-set($map, one, hello, pizza, yum);
    $expect: (
      one: (
        hello: (
          world: new york,
          pizza: yum,
        ),
        goodbye: fugard,
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Returns map with deep value adjusted.');

    $test: deep-set($map, one, monkey, three, test);
    $expect: (
      one: (
        hello: (
          world: new york,
          pizza: sausage,
        ),
        goodbye: fugard,
        monkey: (
          three: test,
        ),
      ),
      two: cheese,
    );
    @include assert-equal($test, $expect,
      'Set deep value even in new key path.');
  }


  // Deep Has-Key
  @include test('deep-has-key') {
    $test: deep-has-key($map, one, hello, world);
    $expect: true;
    @include assert-equal($test, $expect,
      'Returns true for existing deep key.');

    $test: deep-has-key($map, one, hello, neverland);
    $expect: false;
    @include assert-equal($test, $expect,
      'Returns false for non-existing deep key.');
  }


  // Render
  @include test('render') {
    $render: (
      -test: 'Properties are output directly.',
      background: #ff0,
    );

    @include assert('Nested maps are rendered to CSS.') {
      @include input {
        @include render($render);
      }

      @include expect {
        -test: 'Properties are output directly.';
        background: #ff0;
      }
    }
  }
}

// Report
// ------

@include report;
